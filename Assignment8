#include <iostream>
using namespace std;

void computeLPSArray(char pattern[], int m, int lps[]) {
    int length = 0; // length of the previous longest prefix suffix
    lps[0] = 0; 
    int i = 1;

    while (i < m) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void KMPsearch(char text[], char pattern[]) {
    int n = 0, m = 0;
    // Calculate length of text
    while (text[n] != '\0') n++;
    // Calculate length of pattern
    while (pattern[m] != '\0') m++;

    int lps[m];
    computeLPSArray(pattern, m, lps);

    int i = 0; // index for text
    int j = 0; // index for pattern

    bool found = false;

    while (i < n) {
        if (text[i] == pattern[j]) {
            i++;
            j++;
        }

        if (j == m) {
            cout << "Pattern found at index: " << (i - j) << endl;
            found = true;
            j = lps[j - 1];
        } else if (i < n && text[i] != pattern[j]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    if (!found) {
        cout << "Pattern not found in the text." << endl;
    }
}

int main() {
    char text[] = "ABABDABACDABABCABAB";
    char pattern[] = "ABABCABAB";

    KMPsearch(text, pattern);

    return 0;
}
